@use "sass:math";

// Musical Scale System based on Spencer Mortensen's Typographic Scale
// https://spencermortensen.com/articles/typographic-scale/
//
// Formula: f_i = f_0 * r^(i/n)
// Where:
// - f_0 = fundamental frequency (base size)
// - r = ratio of the scale
// - n = number of notes in the scale
// - i = interval number (0, 1, 2, 3, 4...)

// Musical Scale Definitions
// Each scale defines: ratio, notes, and available intervals
$musical-scales: (
  // Tritonic Scale (3 notes, ratio 2) - Simple and bold
  'tritonic': (
    'ratio': 2,
    'notes': 3,
    'intervals': ('i', 'ii', 'iii'),
    'description': 'Simple, bold scale with 3 notes'
  ),
  
  // Tetratonic Scale (4 notes, ratio 2) - Balanced
  'tetratonic': (
    'ratio': 2,
    'notes': 4,
    'intervals': ('i', 'ii', 'iii', 'iv'),
    'description': 'Balanced scale with 4 notes'
  ),
  
  // Classic Typographic Scale (5 notes, ratio 2) - Most versatile
  'classic': (
    'ratio': 2,
    'notes': 5,
    'intervals': ('i', 'ii', 'iii', 'iv', 'v'),
    'description': 'Classic typographic scale with 5 notes'
  ),
  
  // Perfect Fifth Scale (5 notes, ratio 1.5) - Harmonious
  'perfect-fifth': (
    'ratio': 1.5,
    'notes': 5,
    'intervals': ('i', 'ii', 'iii', 'iv', 'v'),
    'description': 'Perfect fifth harmony with 5 notes'
  ),
  
  // Golden Ratio Scale (2 notes, ratio 1.618) - Elegant
  'golden': (
    'ratio': 1.618,
    'notes': 2,
    'intervals': ('i', 'ii'),
    'description': 'Golden ratio scale with 2 notes'
  ),
  
  // Major Third Scale (3 notes, ratio 1.25) - Subtle
  'major-third': (
    'ratio': 1.25,
    'notes': 3,
    'intervals': ('i', 'ii', 'iii'),
    'description': 'Major third scale with 3 notes'
  )
);

// Key System - Different keys can have different base frequencies
$musical-keys: (
  // Standard web typography key (1rem base)
  'web': (
    'base': 1rem,
    'description': 'Standard web typography'
  ),
  
  // Print typography key (12pt base)
  'print': (
    'base': 12pt,
    'description': 'Print typography standard'
  ),
  
  // Large screen key (1.2rem base)
  'large': (
    'base': 1.2rem,
    'description': 'Large screen optimized'
  ),
  
  // Small screen key (0.875rem base)
  'small': (
    'base': 0.875rem,
    'description': 'Small screen optimized'
  )
);

// Function to calculate musical interval size
@function musical-interval($scale: 'classic', $key: 'web', $interval: 'i', $octave: 0) {
  $scale-data: map.get($musical-scales, $scale);
  $key-data: map.get($musical-keys, $key);
  
  @if not $scale-data {
    @error "Scale '#{$scale}' not found in musical scales";
  }
  
  @if not $key-data {
    @error "Key '#{$key}' not found in musical keys";
  }
  
  $ratio: map.get($scale-data, 'ratio');
  $notes: map.get($scale-data, 'notes');
  $intervals: map.get($scale-data, 'intervals');
  $base: map.get($key-data, 'base');
  
  // Find the interval index
  $interval-index: index($intervals, $interval);
  @if not $interval-index {
    @error "Interval '#{$interval}' not found in scale '#{$scale}'";
  }
  
  // Calculate the position: octave * notes + interval_index - 1
  $position: ($octave * $notes) + ($interval-index - 1);
  
  // Apply the musical formula: f_i = f_0 * r^(i/n)
  @return $base * math.pow($ratio, math.div($position, $notes));
}

// Function to get all intervals for a scale
@function get-scale-intervals($scale: 'classic') {
  $scale-data: map.get($musical-scales, $scale);
  @return map.get($scale-data, 'intervals');
}

// Function to get scale info
@function get-scale-info($scale: 'classic') {
  @return map.get($musical-scales, $scale);
}

// Mixin to generate CSS custom properties for a musical scale
@mixin generate-musical-scale($scale: 'classic', $key: 'web', $octaves: 3) {
  $scale-data: map.get($musical-scales, $scale);
  $key-data: map.get($musical-keys, $key);
  
  $ratio: map.get($scale-data, 'ratio');
  $notes: map.get($scale-data, 'notes');
  $intervals: map.get($scale-data, 'intervals');
  $base: map.get($key-data, 'base');
  
  // Generate scale variables
  --musical-scale: #{$scale};
  --musical-key: #{$key};
  --musical-ratio: #{$ratio};
  --musical-notes: #{$notes};
  --musical-base: #{$base};
  
  // Generate interval variables for multiple octaves
  @for $octave from -1 through $octaves {
    @each $interval in $intervals {
      $position: ($octave * $notes) + (index($intervals, $interval) - 1);
      $size: $base * math.pow($ratio, math.div($position, $notes));
      
      $var-name: if($octave == 0, 
        '--musical-#{$interval}', 
        '--musical-#{$interval}#{if($octave > 0, "+#{$octave}", $octave)}'
      );
      
      #{$var-name}: #{$size};
    }
  }
}

// Mixin to generate spacing scale using pure octaves
// Spacing uses octave-based jumps for bigger structural differences while maintaining musical harmony
@mixin generate-musical-spacing($scale: 'classic', $key: 'web') {
  $scale-data: map.get($musical-scales, $scale);
  $key-data: map.get($musical-keys, $key);
  
  $ratio: map.get($scale-data, 'ratio');
  $base: map.get($key-data, 'base');
  
  // Pure octave-based spacing scale
  // Clean, predictable spacing using pure octaves: 0.125, 0.25, 0.5, 1, 2, 4, 8, 16rem
  
  // Small spacings (negative octaves)
  --spacing-xxs: #{$base * 0.125};                 // 0.125rem (3 octaves down)
  --spacing-xs: #{$base * 0.25};                   // 0.25rem (2 octaves down)
  --spacing-sm: #{$base * 0.5};                    // 0.5rem (1 octave down)
  
  // Base spacing (current octave)
  --spacing-md: #{$base};                          // 1rem (base)
  
  // Large spacings (positive octaves)
  --spacing-lg: #{$base * 2};                      // 2rem (1 octave up)
  --spacing-xl: #{$base * 4};                      // 4rem (2 octaves up)
  --spacing-xxl: #{$base * 8};                     // 8rem (3 octaves up)
  --spacing-xxxl: #{$base * 16};                   // 16rem (4 octaves up)
}
